/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jclouds.abiquo.domain.task;

import static com.google.common.base.Preconditions.checkNotNull;

import org.jclouds.abiquo.AbiquoApi;
import org.jclouds.abiquo.domain.DomainWrapper;
import org.jclouds.abiquo.reference.rest.ParentLinkName;
import org.jclouds.http.HttpResponse;
import org.jclouds.http.functions.ParseXMLWithJAXB;
import org.jclouds.rest.ApiContext;

import com.abiquo.model.rest.RESTLink;
import com.abiquo.model.transport.SingleResourceTransportDto;
import com.abiquo.server.core.task.TaskDto;
import com.google.inject.TypeLiteral;

/**
 * A task that produces a result.
 * 
 * @author Ignasi Barrera
 * @author Francesc Montserrat
 * @param <T>
 *           The type of the result generated by the task.
 * @param <D>
 *           The type of the dto generated by the task.
 */
public abstract class AsyncTask<T extends DomainWrapper<D>, D extends SingleResourceTransportDto> extends BaseTask<T> {
   /** The type of the result generated by the task. */
   private Class<T> resultDomainClass;

   /** The type of the dto generated by the task. */
   private Class<D> resultDtoClass;

   /**
    * Constructor to be used only by the builder.
    */
   protected AsyncTask(final ApiContext<AbiquoApi> context, final TaskDto target, final Class<T> resultDomainClass,
         final Class<D> resultDtoClass) {
      super(context, target);
      this.resultDomainClass = resultDomainClass;
      this.resultDtoClass = resultDtoClass;
   }

   // Domain operations

   @Override
   public T getResult() {
      RESTLink link = target.searchLink(ParentLinkName.TASK_RESULT);
      if (link == null) {
         // The task may still be in progress or have failed
         return null;
      }

      HttpResponse response = context.getApi().get(link);
      ParseXMLWithJAXB<D> parser = new ParseXMLWithJAXB<D>(context.utils().xml(), TypeLiteral.get(resultDtoClass));

      return wrap(context, resultDomainClass, parser.apply(response));
   }

   public abstract static class Builder<T extends DomainWrapper<D>, D extends SingleResourceTransportDto> {
      protected ApiContext<AbiquoApi> context;

      protected TaskDto target;

      protected Class<T> resultDomainClass;

      protected Class<D> resultDtoClass;

      public Builder(final ApiContext<AbiquoApi> context, final TaskDto target) {
         super();
         this.context = checkNotNull(context, "context");
         this.target = checkNotNull(target, "target");
      }

      public Builder<T, D> resultDomainClass(Class<T> resultDomainClass) {
         this.resultDomainClass = checkNotNull(resultDomainClass, "resultDomainClass");
         return this;
      }

      public Builder<T, D> resultDtoClass(Class<D> resultDtoClass) {
         this.resultDtoClass = checkNotNull(resultDtoClass, "resultDtoClass");
         return this;
      }

      protected abstract AsyncTask<T, D> build();
   }
}
